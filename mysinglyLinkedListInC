#include<stdio.h>
#include<stdlib.h>

struct node{
    int data;
    struct node* next;
};
 struct node* head;

void display()
{
    struct node * ptr;
    ptr = head;
    if(ptr==NULL)
    {
       printf("nothing to print.");
    }
    else
    {
        printf("Elements of the list are:\n");
        while (ptr!=NULL)

        {
            printf("%d  ", ptr->data);
            ptr = ptr->next;
        }
        
    }

}

void insertatfirst()
{
    struct node * ptr;
    int item;
    ptr=(struct node *) malloc (sizeof (struct node));

    if(ptr==NULL)
    {
        printf("\nOVERFLOW\n");
    }
    else
    {
        printf("Enter Value: ");
        scanf("%d",&item);
        ptr->data = item;
        ptr->next=head;
        head=ptr;
    }
}

void insertAtLast()
{
    struct node *ptr = (struct node*)malloc(sizeof(struct node));     
        struct node *temp;
        int item;  
        if(ptr == NULL)  
        {  
            printf("\nOVERFLOW\n");     
        }  
        else  
        {  
            printf("Enter value:");  
            scanf("%d",&item);  
            ptr->data = item;  
            if(head == NULL)  
            {  
                ptr -> next = NULL;  
                head = ptr;  
                printf("Value inserted.\n");  
            }  
            else  
            {  
                temp = head;  
                while (temp -> next != NULL)  
                {  
                    temp = temp -> next;  
                }  
                temp->next = ptr;  
                ptr->next = NULL;  
                printf("Value inserted.\n"); 
            }
    }

}

void insertioninbw()
{
    int i,loc,item;   
    struct node *ptr, *temp;  
    ptr = (struct node *) malloc (sizeof(struct node));  
    if(ptr == NULL)  
    {  
        printf("\nOVERFLOW");  
    }  
    else  
    {  
        printf("\nEnter element value");  
        scanf("%d",&item);  
        ptr->data = item;  
        printf("\nEnter the location after which you want to insert ");  
        scanf("\n%d",&loc);  
        temp=head;  
        for(i=0;i<loc-1;i++)  
        {  
            temp = temp->next;  
            if(temp == NULL)  
            {  
                printf("\ncan't insert\n");  
                return;  
            }  
          
        }  
        ptr ->next = temp ->next;   
        temp ->next = ptr;   
        printf("\nValue inserted");
    }  
}

void deletefirst()
{
    struct node *ptr=head;
    if(head==NULL)
    {
        printf("\nUNDERFLOW\n");
    }
    else
    {
        head=head->next;
        free(ptr);
        printf("Element Dleted");
    }
    
}

void deletelast()
{
    struct node *ptr=head, *q=head->next;
    
    while(q->next!=NULL)
    {
        ptr=ptr->next;
        q=q->next;
    }
    ptr->next=NULL;
    printf("Element deleted from Last.\n");
    free(q);
}

void deleteatindex()
{
    struct node *ptr=head, *q=head->next;
    int index;
    printf("Enter the index number of element Which you want to delet:");
    scanf("%d",&index);
   for(int i=0;i<index-1;i++)
    {
        ptr=ptr->next;
        q=q->next;
    }
    ptr->next=q->next;
    printf("Element deleted from index %d.\n",index);
    free(q);
    
}

void main()
{
    int n=0;
    
    printf("\nINSERTION OPERATION IN SINGLY LINKED LIST.\n");
    printf("=====================================================================\n");
    printf("You can do the following operation from this.\n1. Insert at begning.\n2. Insert at end.\n3. Insert in between.\n4. Display list\n5. Delete the first element\n6. Delete From last.\n7. Delet Element from index.\n8. Exit\n");
    while(n!=8){
    printf("\nEnter the operation you want to perform: ");
    scanf("%d",&n);
    switch (n)
    {
    case 1:
        insertatfirst();
        break;
    case 2:
        insertAtLast();
        break;
    case 3:
        insertioninbw();
        break;
    case 4:
        display();
        break;
    case 5:
        deletefirst();
        break;
    case 6:
        deletelast();
        break;
    case 7:
        deleteatindex();
        break;
    case 8:
        exit(0);
        break;
    default:
        printf("Invalid input!");
    }
}
}
